require('dotenv').config();
const mysql = require('mysql2/promise');
const fs = require('fs');
const path = require('path');

async function importWorkbookSchema() {
  let connection;
  
  try {
    console.log('üîÑ ƒêang k·∫øt n·ªëi database...');
    
    // T·∫°o k·∫øt n·ªëi
    connection = await mysql.createConnection({
      host: process.env.DB_HOST || 'localhost',
      user: process.env.DB_USER || 'root',
      password: process.env.DB_PASSWORD || '',
      database: process.env.DB_NAME || 'quan_ly_giao_vu',
      multipleStatements: true
    });

    console.log('‚úÖ ƒê√£ k·∫øt n·ªëi database');

    // ƒê·ªçc file schema
    const schemaPath = path.join(__dirname, '../database/workbook_schema.sql');
    console.log('üìñ ƒê·ªçc file schema t·ª´:', schemaPath);
    
    const schema = fs.readFileSync(schemaPath, 'utf8');

    // Th·ª±c thi schema
    console.log('üî® ƒêang t·∫°o b·∫£ng workbooks v√† workbook_entries...');
    await connection.query(schema);

    console.log('‚úÖ Import workbook schema th√†nh c√¥ng!');
    console.log('üìä C√°c b·∫£ng ƒë√£ t·∫°o:');
    console.log('   - workbooks (s·ªï tay c√¥ng t√°c theo tu·∫ßn)');
    console.log('   - workbook_entries (chi ti·∫øt c√¥ng vi·ªác t·ª´ng ng√†y)');

  } catch (error) {
    console.error('‚ùå L·ªói khi import schema:', error.message);
    throw error;
  } finally {
    if (connection) {
      await connection.end();
      console.log('üîí ƒê√£ ƒë√≥ng k·∫øt n·ªëi database');
    }
  }
}

// Ch·∫°y script
importWorkbookSchema()
  .then(() => {
    console.log('‚úÖ Ho√†n t·∫•t!');
    process.exit(0);
  })
  .catch((error) => {
    console.error('‚ùå Script th·∫•t b·∫°i:', error);
    process.exit(1);
  });
