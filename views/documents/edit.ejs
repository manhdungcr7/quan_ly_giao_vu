<%- contentFor('css') %>
<link rel="stylesheet" href="/css/documents.css">

<%- contentFor('content') %>
<% const STATUS_OPTIONS_BASE = [
  { id: 'pending', label: 'Chờ xử lý' },
  { id: 'processing', label: 'Đang xử lý' },
  { id: 'completed', label: 'Hoàn tất' },
  { id: 'approved', label: 'Đã duyệt' },
  { id: 'archived', label: 'Đã lưu trữ' },
  { id: 'overdue', label: 'Quá hạn' }
];
const EXTRA_STATUS_LABELS = { draft: 'Bản nháp' };
let STATUS_OPTIONS = STATUS_OPTIONS_BASE.slice();
if (document && document.status && !STATUS_OPTIONS_BASE.some(function(opt){ return opt.id === document.status; }) && EXTRA_STATUS_LABELS[document.status]) {
  STATUS_OPTIONS = STATUS_OPTIONS.concat([{ id: document.status, label: EXTRA_STATUS_LABELS[document.status] }]);
}
const SELECTED_STATUS = STATUS_OPTIONS.some(function(opt){ return opt.id === document.status; }) ? document.status : 'pending'; %>
<% const DIRECTION_OPTIONS = [
  { id: 'incoming', label: 'Văn bản đến' },
  { id: 'outgoing', label: 'Văn bản đi' }
]; %>
<% const PRIORITY_OPTIONS = [
  { id: 'low', label: 'Thấp' },
  { id: 'medium', label: 'Bình thường' },
  { id: 'high', label: 'Cao' },
  { id: 'urgent', label: 'Khẩn cấp' }
]; %>
<%- include('../partials/alerts') %>
<div class="documents-page">
  <div class="page-header">
    <div>
      <h1 class="page-title">Sửa văn bản</h1>
      <p class="page-subtitle">Cập nhật thông tin văn bản: <%= document.document_number %></p>
    </div>
    <div class="page-actions">
      <a href="/documents/<%= document.id %>" class="btn btn-secondary"><i class="fas fa-arrow-left"></i> Quay lại</a>
    </div>
  </div>

  <% if (typeof error !== 'undefined' && error.length > 0) { %>
    <div class="alert alert-danger">
      <%= error %>
    </div>
  <% } %>

  <% if (moduleSupportEnabled === false) { %>
    <div class="alert alert-warning">
      Hệ thống chưa thể phân nhóm văn bản do thiếu quyền cập nhật cơ sở dữ liệu. Bạn đang chỉnh sửa ở chế độ nhóm mặc định.
    </div>
  <% } %>

  <form method="post" action="/documents/<%= document.id %>" class="document-form" enctype="multipart/form-data">
    <div class="form-grid">
      <div class="form-section">
        <h3>Thông tin cơ bản</h3>
        
        <div class="form-group">
          <label for="direction_display" class="required">Loại văn bản</label>
          <input type="hidden" name="direction" id="direction" value="<%= document.direction || '' %>">
          <input type="text" id="direction_display" list="directionOptions" placeholder="Chọn loại" autocomplete="off" value="<%= (DIRECTION_OPTIONS.find(function(opt){return opt.id === document.direction;}) || {}).label || '' %>">
          <datalist id="directionOptions">
            <% DIRECTION_OPTIONS.forEach(function(opt){ %>
              <option value="<%= opt.label %>" data-id="<%= opt.id %>"></option>
            <% }) %>
          </datalist>
        </div>

        <div class="form-group">
          <label for="document_number" class="required">Số hiệu văn bản</label>
          <input type="text" name="document_number" id="document_number" 
                 value="<%= document.document_number || '' %>" 
                 placeholder="VD: 123/QD-ĐHBK" required>
          <small>Số hiệu phải duy nhất trong hệ thống</small>
        </div>

        <div class="form-group">
          <label for="title" class="required">Tiêu đề</label>
          <input type="text" name="title" id="title" 
                 value="<%= document.title || '' %>" 
                 placeholder="Nhập tiêu đề văn bản" required>
        </div>

        <div class="form-group">
          <label for="type_display">Loại văn bản</label>
          <input type="hidden" name="type_id" id="type_id" value="<%= document.type_id || '' %>">
          <% const currentType = (types || []).find(function(type){ return String(type.id) === String(document.type_id); }); %>
          <input type="text" name="type_label" id="type_display" list="typeOptions" placeholder="Nhập để tìm nhanh" autocomplete="off" value="<%= currentType ? currentType.name : '' %>">
          <datalist id="typeOptions">
            <% (types || []).forEach(function(type) { %>
              <option value="<%= type.name %>" data-id="<%= type.id %>"></option>
            <% }) %>
          </datalist>
        </div>

        <div class="form-group">
          <label for="content_summary">Trích yếu nội dung</label>
          <textarea name="content_summary" id="content_summary" rows="3" 
                    placeholder="Tóm tắt nội dung văn bản"><%= document.content_summary || '' %></textarea>
        </div>

        <div class="form-group">
          <label for="chi_dao">Chỉ đạo / Đề xuất tham mưu</label>
          <textarea name="chi_dao" id="chi_dao" rows="3" placeholder="Nhập ý kiến đề xuất hoặc chỉ đạo ban đầu"><%= document.chi_dao || '' %></textarea>
          <small>Phần này dùng để ghi chú chỉ đạo sơ bộ hoặc đề xuất tham mưu gửi lãnh đạo.</small>
        </div>
      </div>

      <div class="form-section">
        <h3>Thông tin xử lý</h3>

        <div class="form-group">
          <label for="issue_date">Ngày ban hành</label>
          <input type="date" name="issue_date" id="issue_date" 
                 value="<%= document.issue_date ? document.issue_date.toISOString().split('T')[0] : '' %>">
        </div>

        <div class="form-group">
          <label for="received_date">Ngày nhận</label>
          <input type="date" name="received_date" id="received_date" 
                 value="<%= document.received_date ? document.received_date.toISOString().split('T')[0] : '' %>">
        </div>

        <div class="form-group">
          <label for="processing_deadline">Hạn xử lý</label>
          <input type="date" name="processing_deadline" id="processing_deadline" 
                 value="<%= document.processing_deadline ? document.processing_deadline.toISOString().split('T')[0] : '' %>">
        </div>

        <div class="form-group">
          <label for="priority_display">Độ ưu tiên</label>
          <input type="hidden" name="priority" id="priority" value="<%= document.priority || 'medium' %>">
          <input type="text" id="priority_display" list="priorityOptions" placeholder="Chọn độ ưu tiên" autocomplete="off" value="<%= (PRIORITY_OPTIONS.find(function(opt){return opt.id === (document.priority || 'medium');}) || {}).label || '' %>">
          <datalist id="priorityOptions">
            <% PRIORITY_OPTIONS.forEach(function(opt){ %>
              <option value="<%= opt.label %>" data-id="<%= opt.id %>"></option>
            <% }) %>
          </datalist>
        </div>

        <div class="form-group">
          <label for="status_select">Trạng thái</label>
          <select name="status" id="status_select">
            <% STATUS_OPTIONS.forEach(function(option){ %>
              <option value="<%= option.id %>" <%= SELECTED_STATUS === option.id ? 'selected' : '' %>><%= option.label %></option>
            <% }); %>
          </select>
          <small>Trạng thái hiện tại của văn bản trong quy trình xử lý.</small>
        </div>

        <div class="form-group">
          <label for="assigned_to_display">Người xử lý</label>
          <input type="hidden" name="assigned_to" id="assigned_to" value="<%= document.assigned_to || '' %>">
          <% const currentAssignee = (users || []).find(function(user){ return String(user.id) === String(document.assigned_to); }); %>
          <input type="text" name="assigned_to_label" id="assigned_to_display" list="assignedToOptions" placeholder="Nhập tên để tìm" autocomplete="off" value="<%= currentAssignee ? currentAssignee.full_name : '' %>">
          <datalist id="assignedToOptions">
            <% (users || []).forEach(function(user) { %>
              <option value="<%= user.full_name %>" data-id="<%= user.id %>"></option>
            <% }) %>
          </datalist>
        </div>
      </div>

      <div class="form-section">
        <h3>Cơ quan liên quan</h3>

        <div class="form-group" id="from_org_group">
          <label for="from_org_display">Cơ quan gửi</label>
          <input type="hidden" name="from_org_id" id="from_org_id" value="<%= document.from_org_id || '' %>">
          <% const currentFromOrg = (organizations || []).find(function(org){ return String(org.id) === String(document.from_org_id); }); %>
          <input type="text" name="from_org_label" id="from_org_display" list="fromOrgOptions" placeholder="Nhập để tìm cơ quan" autocomplete="off" value="<%= currentFromOrg ? currentFromOrg.name : '' %>">
          <datalist id="fromOrgOptions">
            <% (organizations || []).forEach(function(org) { %>
              <option value="<%= org.name %>" data-id="<%= org.id %>"></option>
            <% }) %>
          </datalist>
        </div>

        <div class="form-group" id="to_org_group">
          <label for="to_org_display">Cơ quan nhận</label>
          <input type="hidden" name="to_org_id" id="to_org_id" value="<%= document.to_org_id || '' %>">
          <% const currentToOrg = (organizations || []).find(function(org){ return String(org.id) === String(document.to_org_id); }); %>
          <input type="text" name="to_org_label" id="to_org_display" list="toOrgOptions" placeholder="Nhập để tìm cơ quan" autocomplete="off" value="<%= currentToOrg ? currentToOrg.name : '' %>">
          <datalist id="toOrgOptions">
            <% (organizations || []).forEach(function(org) { %>
              <option value="<%= org.name %>" data-id="<%= org.id %>"></option>
            <% }) %>
          </datalist>
        </div>

        <div class="form-group">
          <label for="attachments">File đính kèm mới</label>
          <input type="file" name="attachments" id="attachments" multiple 
                 accept=".pdf,.doc,.docx,.xls,.xlsx,.txt,.jpg,.png">
          <small>Chấp nhận: PDF, Word, Excel, ảnh. Tối đa 10MB mỗi file.</small>
        </div>
      </div>
    </div>

    <div class="form-actions">
      <button type="submit" class="btn btn-primary">
        <i class="fas fa-save"></i> Cập nhật văn bản
      </button>
      <a href="/documents/<%= document.id %>" class="btn btn-secondary">
        <i class="fas fa-times"></i> Hủy bỏ
      </a>
    </div>
  </form>
</div>

<script>
(function() {
  function bindDatalist(displayId, hiddenId, datalistId, options) {
    const config = options || {};
    const displayEl = document.getElementById(displayId);
    const hiddenEl = document.getElementById(hiddenId);
    const datalistEl = document.getElementById(datalistId);

    if (!displayEl || !hiddenEl || !datalistEl) {
      return;
    }

    if (config.required) {
      displayEl.setAttribute('required', 'required');
    }

    const findOptionByValue = function(value) {
      for (let i = 0; i < datalistEl.options.length; i++) {
        const option = datalistEl.options[i];
        if (option.dataset && option.dataset.id === value) {
          return option;
        }
      }
      return null;
    };

    const findOptionByLabel = function(label) {
      for (let i = 0; i < datalistEl.options.length; i++) {
        const option = datalistEl.options[i];
        if (option.value === label) {
          return option;
        }
      }
      return null;
    };

    const syncDisplayedFromHidden = function() {
      if (!hiddenEl.value) {
        return;
      }
      const matched = findOptionByValue(hiddenEl.value);
      if (matched && matched.value) {
        displayEl.value = matched.value;
      }
    };

    const syncHiddenFromDisplay = function(triggerCallback) {
      const label = displayEl.value.trim();
      const matched = findOptionByLabel(label);
      if (matched) {
        hiddenEl.value = matched.dataset && matched.dataset.id ? matched.dataset.id : matched.value;
      } else if (config.allowFreeText === true) {
        hiddenEl.value = label;
      } else {
        hiddenEl.value = '';
      }

      if (!matched && config.allowFreeText !== true && label) {
        displayEl.classList.add('input-unmatched');
        displayEl.setCustomValidity('Vui lòng chọn giá trị từ gợi ý');
      } else {
        displayEl.classList.remove('input-unmatched');
        displayEl.setCustomValidity('');
      }

      if (typeof config.onChange === 'function' && triggerCallback !== false) {
        config.onChange(hiddenEl.value, matched ? matched.value : label);
      }
    };

    displayEl.addEventListener('change', function() { syncHiddenFromDisplay(true); });
    displayEl.addEventListener('blur', function() { syncHiddenFromDisplay(true); });
    displayEl.addEventListener('input', function() {
      if (!displayEl.value.trim()) {
        hiddenEl.value = '';
        displayEl.classList.remove('input-unmatched');
        displayEl.setCustomValidity('');
        if (typeof config.onChange === 'function') {
          config.onChange('', '');
        }
      }
    });

    syncDisplayedFromHidden();
    syncHiddenFromDisplay(false);
    if (typeof config.onChange === 'function') {
      config.onChange(hiddenEl.value, displayEl.value);
    }
  }

  const fromOrgGroup = document.getElementById('from_org_group');
  const toOrgGroup = document.getElementById('to_org_group');
  const fromOrgHidden = document.getElementById('from_org_id');
  const toOrgHidden = document.getElementById('to_org_id');
  const fromOrgDisplay = document.getElementById('from_org_display');
  const toOrgDisplay = document.getElementById('to_org_display');

  function applyDirectionRules(currentDirection) {
    if (!fromOrgGroup || !toOrgGroup || !fromOrgHidden || !toOrgHidden) {
      return;
    }

    if (currentDirection === 'incoming') {
      fromOrgGroup.style.display = 'block';
      toOrgGroup.style.display = 'none';
      fromOrgHidden.required = false;
      toOrgHidden.required = false;
      if (fromOrgDisplay) {
        fromOrgDisplay.setAttribute('required', 'required');
      }
      if (toOrgDisplay) {
        toOrgDisplay.removeAttribute('required');
      }
    } else if (currentDirection === 'outgoing') {
      fromOrgGroup.style.display = 'none';
      toOrgGroup.style.display = 'block';
      fromOrgHidden.required = false;
      toOrgHidden.required = false;
      if (fromOrgDisplay) {
        fromOrgDisplay.removeAttribute('required');
      }
      if (toOrgDisplay) {
        toOrgDisplay.setAttribute('required', 'required');
      }
    } else {
      fromOrgGroup.style.display = 'block';
      toOrgGroup.style.display = 'block';
      fromOrgHidden.required = false;
      toOrgHidden.required = false;
      if (fromOrgDisplay) {
        fromOrgDisplay.removeAttribute('required');
      }
      if (toOrgDisplay) {
        toOrgDisplay.removeAttribute('required');
      }
    }
  }

  bindDatalist('direction_display', 'direction', 'directionOptions', {
    required: true,
    onChange: function(value) {
      applyDirectionRules(value);
    }
  });

  bindDatalist('type_display', 'type_id', 'typeOptions', { allowFreeText: true });
  bindDatalist('priority_display', 'priority', 'priorityOptions');
  bindDatalist('assigned_to_display', 'assigned_to', 'assignedToOptions', { allowFreeText: true });
  bindDatalist('from_org_display', 'from_org_id', 'fromOrgOptions', { allowFreeText: true });
  bindDatalist('to_org_display', 'to_org_id', 'toOrgOptions', { allowFreeText: true });
})();
</script>