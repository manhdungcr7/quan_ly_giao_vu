<%- contentFor('css') %>
<link rel="stylesheet" href="/css/documents.css">

<%- contentFor('content') %>
<%
  const moduleTabs = Array.isArray(modules) ? modules : [];
  const activeModule = module || moduleTabs.find(function(m){ return m.key === moduleKey; }) || moduleTabs[0] || { key: moduleKey || 'administrative', label: 'Quản lý văn bản', icon: 'fa-folder-tree', description: '' };
  const moduleSlug = activeModule.key || moduleKey || 'administrative';
  const heroTitle = direction === 'incoming' ? 'Văn bản đến' : 'Văn bản đi';
  const directionSubtitle = direction === 'incoming'
    ? 'Theo dõi các văn bản tiếp nhận và xử lý kịp thời.'
    : 'Quản lý văn bản ban hành với tiến độ rõ ràng.';
  const heroSubtitle = (activeModule.description ? (activeModule.description + ' ') : '') + directionSubtitle;

  const breadcrumb = [
    { label: 'Trang chủ', url: '/dashboard', icon: 'fa-house' },
    {
      label: activeModule.label || 'Quản lý văn bản',
      url: `/documents/${moduleSlug}/incoming`,
      icon: activeModule.icon || 'fa-folder-tree'
    },
    {
      label: heroTitle,
      url: `/documents/${moduleSlug}/${direction === 'incoming' ? 'incoming' : 'outgoing'}`,
      icon: direction === 'incoming' ? 'fa-inbox' : 'fa-paper-plane'
    }
  ];

  const STATUS_LABELS = {
    pending: 'Chờ xử lý',
    processing: 'Đang xử lý',
    completed: 'Hoàn tất',
    approved: 'Đã duyệt',
    archived: 'Đã lưu trữ',
    overdue: 'Quá hạn'
  };
%>
<div class="documents-page">
  <section class="documents-hero" aria-labelledby="documentsHeroHeading">
    <nav class="documents-breadcrumb" aria-label="Breadcrumb">
      <ol class="documents-breadcrumb__list">
        <% breadcrumb.forEach(function(item, index) { const isLast = index === breadcrumb.length - 1; %>
          <li class="documents-breadcrumb__item">
            <% if (!isLast) { %>
              <a class="documents-breadcrumb__link" href="<%= item.url %>">
                <i class="fas <%= item.icon %>" aria-hidden="true"></i>
                <span><%= item.label %></span>
              </a>
            <% } else { %>
              <span class="documents-breadcrumb__current">
                <i class="fas <%= item.icon %>" aria-hidden="true"></i>
                <span><%= item.label %></span>
              </span>
            <% } %>
          </li>
        <% }); %>
      </ol>
    </nav>
    <div class="documents-hero__chip">
      <span class="documents-hero__chip-icon"><i class="fas <%= activeModule.icon || 'fa-folder-tree' %>" aria-hidden="true"></i></span>
      <span class="documents-hero__chip-label"><%= activeModule.label %></span>
    </div>
    <div class="documents-hero__heading">
      <h1 id="documentsHeroHeading" class="documents-hero__title"><%= heroTitle %></h1>
      <p class="documents-hero__subtitle"><%= heroSubtitle %></p>
    </div>
  </section>

  <% if (moduleTabs.length > 1) { %>
    <section class="documents-modules" aria-label="Chọn nhóm văn bản">
      <% moduleTabs.forEach(function(tab){ const isActive = tab.key === moduleSlug; %>
        <a class="module-card <%= isActive ? 'module-card--active' : '' %>" href="/documents/<%= tab.key %>/<%= direction %>">
          <span class="module-card__icon"><i class="fas <%= tab.icon || 'fa-folder-tree' %>" aria-hidden="true"></i></span>
          <span class="module-card__body">
            <span class="module-card__title"><%= tab.label %></span>
            <span class="module-card__desc"><%= tab.description || 'Quản lý các văn bản thuộc nhóm này.' %></span>
          </span>
          <% if (isActive) { %>
            <span class="module-card__status">Đang xem</span>
          <% } %>
        </a>
      <% }); %>
    </section>
  <% } %>

  <% if (typeof success !== 'undefined' && success.length > 0) { %>
    <div class="alert alert-success">
      <%= success %>
    </div>
  <% } %>
    <% if (moduleSupportEnabled === false) { %>
      <div class="alert alert-warning">
        Hiện tại hệ thống chưa thể phân tách văn bản theo nhóm do thiếu quyền cập nhật cơ sở dữ liệu. Dữ liệu đang được hiển thị ở chế độ một nhóm mặc định.
      </div>
    <% } %>
  <% if (typeof error !== 'undefined' && error.length > 0) { %>
    <div class="alert alert-danger">
      <%= error %>
    </div>
  <% } %>

  <section class="documents-toolbar" aria-label="Điều hướng quản lý văn bản">
    <div class="documents-toolbar__cluster">
      <div class="documents-toolbar__badge" aria-hidden="true">
        <i class="fas fa-folder-open"></i>
      </div>
      <div class="documents-toolbar__meta">
        <span class="documents-toolbar__eyebrow"><%= activeModule.label %></span>
        <span class="documents-toolbar__title">Chọn luồng xử lý</span>
      </div>
      <div class="documents-toolbar__tabs" role="tablist">
        <a href="/documents/<%= moduleSlug %>/incoming"
           class="documents-tab <%= direction==='incoming' ? 'documents-tab--active' : '' %>"
           role="tab"
           aria-selected="<%= direction==='incoming' ? 'true' : 'false' %>">
          <i class="fas fa-inbox"></i>
          <span>Văn bản đến</span>
        </a>
        <a href="/documents/<%= moduleSlug %>/outgoing"
           class="documents-tab <%= direction==='outgoing' ? 'documents-tab--active' : '' %>"
           role="tab"
           aria-selected="<%= direction==='outgoing' ? 'true' : 'false' %>">
          <i class="fas fa-paper-plane"></i>
          <span>Văn bản đi</span>
        </a>
      </div>
    </div>
    <div class="documents-toolbar__actions">
      <div class="documents-toolbar__stat" title="Tổng số văn bản trong bộ lọc hiện tại">
        <span class="documents-toolbar__stat-label">Tổng</span>
        <span class="documents-toolbar__stat-value"><%= stats?.total || 0 %></span>
      </div>
      <a href="/documents/create?module=<%= moduleSlug %>" class="documents-toolbar__cta">
        <i class="fas fa-plus"></i>
        <span>Thêm văn bản</span>
      </a>
    </div>
  </section>

  <div class="documents-kpis">
    <div class="documents-kpi documents-kpi--total">
      <span class="documents-kpi__value"><%= stats?.total || 0 %></span>
      <span class="documents-kpi__label">Tổng</span>
    </div>
    <div class="documents-kpi documents-kpi--pending">
      <span class="documents-kpi__value"><%= stats?.pending || 0 %></span>
      <span class="documents-kpi__label">Chờ xử lý</span>
    </div>
    <div class="documents-kpi documents-kpi--processing">
      <span class="documents-kpi__value"><%= stats?.processing || 0 %></span>
      <span class="documents-kpi__label">Đang xử lý</span>
    </div>
    <div class="documents-kpi documents-kpi--completed">
      <span class="documents-kpi__value"><%= stats?.completed || 0 %></span>
      <span class="documents-kpi__label">Hoàn tất</span>
    </div>
    <div class="documents-kpi documents-kpi--overdue">
      <span class="documents-kpi__value"><%= stats?.overdue || 0 %></span>
      <span class="documents-kpi__label">Quá hạn</span>
    </div>
  </div>

  <form method="get" class="filters" autocomplete="off">
    <div class="filter-group">
      <label>Tìm kiếm</label>
      <input type="text" name="search" value="<%= filters.search || '' %>" placeholder="Số hiệu, tiêu đề, trích yếu..." />
    </div>
    <div class="filter-group">
      <label>Trạng thái</label>
      <% const STATUS_ORDER = ['pending','processing','completed','approved','archived','overdue']; %>
      <select name="status" id="filter_status_value" class="filter-select">
        <option value="">-- Tất cả trạng thái --</option>
        <% STATUS_ORDER.forEach(function(st){ %>
          <option value="<%= st %>" <%= filters.status === st ? 'selected' : '' %>><%= STATUS_LABELS[st] || st %></option>
        <% }) %>
      </select>
    </div>
    <div class="filter-group">
      <label>Loại</label>
      <input type="hidden" name="type_id" id="filter_type_id" value="<%= filters.type_id || '' %>">
      <% const currentFilterType = (types || []).find(function(t){ return String(filters.type_id || '') === String(t.id); }); %>
      <input type="text"
             id="filter_type_display"
             placeholder="Nhập để tìm loại văn bản"
             list="filterTypeOptions"
             autocomplete="off"
             value="<%= currentFilterType ? currentFilterType.name : '' %>">
      <datalist id="filterTypeOptions">
        <% (types || []).forEach(function(t){ %>
          <option value="<%= t.name %>" data-id="<%= t.id %>"></option>
        <% }) %>
      </datalist>
    </div>
    <div class="filter-group">
      <label>Từ ngày</label>
      <input type="date" name="from_date" value="<%= filters.from_date || '' %>" />
    </div>
    <div class="filter-group">
      <label>Đến ngày</label>
      <input type="date" name="to_date" value="<%= filters.to_date || '' %>" />
    </div>
    <div class="filter-actions">
      <button type="submit" class="btn btn-secondary">Lọc</button>
      <a class="btn btn-light" href="/documents/<%= moduleSlug %>/<%= direction %>">Xóa</a>
      <input type="hidden" name="module" value="<%= moduleSlug %>">
    </div>
  </form>

  <div class="table-wrapper">
    <table class="doc-table">
      <thead>
        <tr>
          <th style="width:120px">Số hiệu</th>
          <th>Tiêu đề</th>
          <th style="width:130px">Loại</th>
          <th style="width:160px"><%= direction==='incoming' ? 'Cơ quan gửi' : 'Nơi nhận' %></th>
          <th style="width:200px">Chỉ đạo</th>
          <th style="width:140px">Người xử lý</th>
          <th style="width:110px">Ngày ban hành</th>
          <th style="width:110px">Hạn xử lý</th>
          <th style="width:120px">Trạng thái</th>
          <th style="width:140px">Thao tác</th>
        </tr>
      </thead>
      <tbody>
        <% if (documents && documents.length) { %>
          <% documents.forEach(function(d){ %>
            <tr>
              <td class="mono"><%= d.document_number || '-' %></td>
              <td class="title-cell">
                <span class="doc-title"><%= d.title || '(Không tiêu đề)' %></span>
                <% if (d.priority === 'urgent') { %><span class="badge badge-urgent">Gấp</span><% } %>
              </td>
              <td><%= d.document_type_name || '-' %></td>
              <td><%= direction==='incoming' ? (d.from_organization_name || '-') : (d.to_organization_name || '-') %></td>
              <td class="directive-cell">
                <div class="directive-content">
                  <div class="directive-text"><%= d.chi_dao ? d.chi_dao.substring(0,80) : '' %></div>
                  <div class="directive-actions">
                    <button class="icon-btn icon-btn--sky directive-edit"
                            title="<%= d.chi_dao ? 'Cập nhật chỉ đạo' : 'Thêm chỉ đạo' %>"
                            aria-label="<%= d.chi_dao ? 'Cập nhật chỉ đạo' : 'Thêm chỉ đạo' %>"
                            data-id="<%= d.id %>" data-directive="<%= d.chi_dao || '' %>">
                      <% if (d.chi_dao && d.chi_dao.trim()) { %>
                        <svg viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="icon-svg">
                          <path fill="currentColor" d="M4 2.5A1.5 1.5 0 0 1 5.5 1h3A1.5 1.5 0 0 1 10 2.5V4h4.5A1.5 1.5 0 0 1 16 5.5v3A1.5 1.5 0 0 1 14.5 10H12v1.5a1.5 1.5 0 0 1-1.5 1.5H9l-.28 1.12a1.5 1.5 0 0 1-1.47 1.13H5.5A1.5 1.5 0 0 1 4 12.25zM8 3H6v2h2zm6 3H6v7h1.3l.38-1.52A1.5 1.5 0 0 1 9.13 10H12V8.5A1.5 1.5 0 0 1 13.5 7H14z"/>
                        </svg>
                      <% } else { %>
                        <svg viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="icon-svg">
                          <path fill="currentColor" d="M10 3a1 1 0 0 1 1 1v5h5a1 1 0 1 1 0 2h-5v5a1 1 0 1 1-2 0v-5H4a1 1 0 1 1 0-2h5V4a1 1 0 0 1 1-1z"/>
                        </svg>
                      <% } %>
                    </button>
                    <% if (d.chi_dao && d.chi_dao.trim()) { %>
                      <button class="icon-btn icon-btn--emerald directive-approve"
                              title="Phê duyệt chỉ đạo"
                              aria-label="Phê duyệt chỉ đạo"
                              data-id="<%= d.id %>">
                        <svg viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="icon-svg">
                          <path fill="currentColor" d="M10 2a8 8 0 1 0 8 8 8.01 8.01 0 0 0-8-8zm3.54 6.46-4 4a1 1 0 0 1-1.42 0l-2-2a1 1 0 1 1 1.42-1.42L9 10.59l3.29-3.3a1 1 0 1 1 1.42 1.42z"/>
                        </svg>
                      </button>
                    <% } %>
                  </div>
                </div>
              </td>
              <td><%= d.assigned_to_name || '-' %></td>
              <td><%= d.issue_date ? new Date(d.issue_date).toLocaleDateString('vi-VN') : '-' %></td>
              <td><%= d.processing_deadline ? new Date(d.processing_deadline).toLocaleDateString('vi-VN') : '-' %></td>
              <td>
                <% const st = d.status || 'pending'; %>
                <span class="status-badge status-<%= st %>"><%= STATUS_LABELS[st] || st %></span>
              </td>
              <td class="actions">
                <div class="action-buttons">
                  <button class="icon-btn icon-btn--indigo view-doc"
                          title="Xem chi tiết văn bản"
                          aria-label="Xem chi tiết văn bản"
                          data-id="<%= d.id %>">
                    <svg viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="icon-svg">
                      <path fill="currentColor" d="M10 4.5c-4.5 0-7.5 5.5-7.5 5.5s3 5.5 7.5 5.5 7.5-5.5 7.5-5.5-3-5.5-7.5-5.5Zm0 9a3.5 3.5 0 1 1 3.5-3.5A3.5 3.5 0 0 1 10 13.5Zm0-5a1.5 1.5 0 1 0 1.5 1.5A1.5 1.5 0 0 0 10 8.5Z"/>
                    </svg>
                  </button>
                  <button class="icon-btn icon-btn--amber edit-doc"
                          title="Chỉnh sửa văn bản"
                          aria-label="Chỉnh sửa văn bản"
                          data-id="<%= d.id %>">
                    <svg viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="icon-svg">
                      <path fill="currentColor" d="M12.59 2.59a2 2 0 0 1 2.82 0l1.99 1.99a2 2 0 0 1 0 2.82l-8.6 8.6a2 2 0 0 1-.94.53l-4 1a1 1 0 0 1-1.21-1.21l1-4a2 2 0 0 1 .52-.94zM13 5l-8 8-.5 2 2-.5 8-8z"/>
                    </svg>
                  </button>
                   <button class="icon-btn icon-btn--cyan attachments-doc"
                           title="Quản lý tệp đính kèm"
                           aria-label="Quản lý tệp đính kèm"
                           data-id="<%= d.id %>" data-number="<%= d.document_number %>">
                     <svg viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="icon-svg">
                       <path fill="currentColor" d="M7.5 17a4.5 4.5 0 0 1-3.18-7.68l6.6-6.6a3.5 3.5 0 0 1 4.95 4.95l-6.6 6.6a2.5 2.5 0 0 1-3.54-3.54l6.3-6.29a1 1 0 1 1 1.41 1.41l-6.3 6.3a.5.5 0 0 0 .71.71l6.6-6.6a1.5 1.5 0 1 0-2.12-2.12l-6.6 6.6a2.5 2.5 0 0 0 3.54 3.54l6.6-6.6a1 1 0 0 1 1.41 1.41l-6.6 6.6A4.47 4.47 0 0 1 7.5 17Z"/>
                     </svg>
                   </button>
                  <button class="icon-btn icon-btn--rose delete-doc"
                          title="Xóa văn bản (<%= d.document_number %>)"
                          aria-label="Xóa văn bản"
                          data-id="<%= d.id %>" data-number="<%= d.document_number %>">
                    <svg viewBox="0 0 20 20" aria-hidden="true" focusable="false" class="icon-svg">
                      <path fill="currentColor" d="M7.5 3a1.5 1.5 0 0 1 1.5-1.5h2a1.5 1.5 0 0 1 1.5 1.5H15a1 1 0 0 1 0 2h-.5v9.5A2.5 2.5 0 0 1 12 17h-4a2.5 2.5 0 0 1-2.5-2.5V5H5a1 1 0 0 1 0-2zm1 2v9.5a.5.5 0 0 0 .5.5h4a.5.5 0 0 0 .5-.5V5zM9 8a1 1 0 0 1 2 0v5a1 1 0 1 1-2 0z"/>
                    </svg>
                  </button>
                </div>
              </td>
            </tr>
          <% }) %>
        <% } else { %>
          <tr>
            <td colspan="10" class="empty">Không có văn bản phù hợp.</td>
          </tr>
        <% } %>
      </tbody>
    </table>
  </div>

  <div class="pagination">
    <% if (pagination && pagination.totalPages > 1) { %>
      <div class="pagination-info">Trang <%= pagination.page %>/<%= pagination.totalPages %> ( <%= pagination.total %> bản ghi )</div>
      <div class="pagination-controls">
        <% const baseUrl = direction==='incoming' ? '/documents/incoming' : '/documents/outgoing'; %>
        <% const qs = (page) => {
             const params = new URLSearchParams(filters);
             params.set('page', page);
             return baseUrl + '?' + params.toString();
           }; %>
        <a class="pg-btn <%= !pagination.hasPrev ? 'disabled' : '' %>" href="<%= pagination.hasPrev ? qs(pagination.page - 1) : '#' %>"><i class="fas fa-chevron-left"></i></a>
        <a class="pg-btn <%= !pagination.hasNext ? 'disabled' : '' %>" href="<%= pagination.hasNext ? qs(pagination.page + 1) : '#' %>"><i class="fas fa-chevron-right"></i></a>
      </div>
    <% } %>
  </div>
</div>

<!-- Modal: Sửa chỉ đạo -->
<div class="modal" id="directiveModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Chỉ đạo / Tham mưu</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <form id="directiveForm">
        <div class="modal-body">
          <div class="form-group">
            <label for="directiveContent">Nội dung chỉ đạo:</label>
            <textarea id="directiveContent" name="chi_dao" rows="4" class="form-control" 
                      placeholder="Nhập nội dung chỉ đạo hoặc ý kiến tham mưu..."></textarea>
          </div>
          <div class="form-group">
            <label for="directiveNote">Ghi chú (tùy chọn):</label>
            <input type="text" id="directiveNote" name="note" class="form-control" 
                   placeholder="Ghi chú bổ sung...">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
          <button type="submit" class="btn btn-primary">Lưu chỉ đạo</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal: Danh sách tệp đính kèm -->
<div class="modal" id="attachmentsModal">
  <div class="modal-dialog" style="max-width:650px;">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Tệp đính kèm <span id="attachmentsDocNumber"></span></h5>
        <button type="button" class="close" data-dismiss="modal"><span>&times;</span></button>
      </div>
      <div class="modal-body">
        <div id="attachmentsList" class="attachments-list loading">Đang tải...</div>
        <template id="attachmentRowTpl">
          <div class="file-row">
            <div class="file-icon"><i class="fas fa-file"></i></div>
            <div class="file-meta">
              <div class="file-name"></div>
              <div class="file-info"></div>
            </div>
            <div class="file-actions">
              <button class="icon-btn file-preview" title="Xem trước"><i class="fas fa-eye"></i></button>
              <a class="icon-btn file-download" title="Tải xuống"><i class="fas fa-download"></i></a>
            </div>
          </div>
        </template>
        <div id="previewContainer" class="preview-container" style="display:none;">
          <div class="preview-header">
            <strong>Xem trước</strong>
            <button class="close-preview" title="Đóng">&times;</button>
          </div>
          <div class="preview-content" id="previewContent">Chưa chọn tệp.</div>
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Đóng</button>
      </div>
    </div>
  </div>
</div>

<!-- Modal: Xác nhận phê duyệt -->
<div class="modal" id="approveModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Phê duyệt chỉ đạo</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <form id="approveForm">
        <div class="modal-body">
          <p>Bạn có chắc chắn muốn phê duyệt nội dung chỉ đạo này?</p>
          <div class="current-directive">
            <strong>Nội dung hiện tại:</strong>
            <div id="currentDirectiveText" class="directive-preview"></div>
          </div>
          <div class="form-group mt-3">
            <label for="approveNote">Ghi chú phê duyệt (tùy chọn):</label>
            <input type="text" id="approveNote" name="note" class="form-control" 
                   placeholder="Ghi chú khi phê duyệt...">
          </div>
        </div>
        <div class="modal-footer">
          <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
          <button type="submit" class="btn btn-success">Phê duyệt</button>
        </div>
      </form>
    </div>
  </div>
</div>

<!-- Modal: Xác nhận xóa -->
<div class="modal" id="deleteModal">
  <div class="modal-dialog">
    <div class="modal-content">
      <div class="modal-header">
        <h5 class="modal-title">Xác nhận xóa văn bản</h5>
        <button type="button" class="close" data-dismiss="modal">
          <span>&times;</span>
        </button>
      </div>
      <div class="modal-body">
        <p>Bạn có chắc chắn muốn xóa văn bản này?</p>
        <div class="delete-info">
          <strong>Số hiệu:</strong> <span id="deleteDocNumber"></span>
        </div>
        <div class="alert alert-warning mt-2">
          <i class="fas fa-exclamation-triangle"></i>
          Thao tác này không thể hoàn tác!
        </div>
      </div>
      <div class="modal-footer">
        <button type="button" class="btn btn-secondary" data-dismiss="modal">Hủy</button>
        <button type="button" id="confirmDelete" class="btn btn-danger">Xóa văn bản</button>
      </div>
    </div>
  </div>
</div>

<script>
document.addEventListener('DOMContentLoaded', function() {
    let currentDocId = null;

  function setupSmartSuggest(config) {
    const displayEl = document.getElementById(config.displayId);
    const hiddenEl = config.hiddenId ? document.getElementById(config.hiddenId) : null;
    const datalistEl = document.getElementById(config.datalistId);

    if (!displayEl || !datalistEl) {
      return null;
    }

    const storageKey = config.storageKey;
    const allowUnknown = config.allowUnknown !== false;
    const rememberUnknown = config.rememberUnknown !== false;
    const highlightUnknown = config.highlightUnknown === true;
    const maxSuggestions = config.maxSuggestions || 25;

    const normalize = function(str) {
      return (str || '').trim().toLowerCase();
    };

    const ensureOption = function(label, value) {
      const cleanedLabel = label && label.trim();
      if (!cleanedLabel) {
        return null;
      }
      const existing = Array.from(datalistEl.options).find(function(opt) {
        return normalize(opt.value) === normalize(cleanedLabel);
      });
      if (existing) {
        if (value && !existing.dataset.id) {
          existing.dataset.id = value;
        }
        return existing;
      }
      const option = document.createElement('option');
      option.value = cleanedLabel;
      if (value) {
        option.dataset.id = value;
      }
      datalistEl.appendChild(option);
      return option;
    };

    if (Array.isArray(config.baseOptions)) {
      config.baseOptions.forEach(function(opt) {
        ensureOption(opt.label, opt.value);
      });
    }

    const loadStored = function() {
      if (!storageKey) {
        return [];
      }
      try {
        const raw = localStorage.getItem(storageKey);
        const parsed = raw ? JSON.parse(raw) : [];
        return Array.isArray(parsed) ? parsed : [];
      } catch (error) {
        console.warn('Không thể đọc gợi ý đã lưu của', storageKey, error);
        return [];
      }
    };

    const saveStored = function(list) {
      if (!storageKey) {
        return;
      }
      try {
        localStorage.setItem(storageKey, JSON.stringify(list.slice(0, maxSuggestions)));
      } catch (error) {
        console.warn('Không thể lưu gợi ý cho', storageKey, error);
      }
    };

    loadStored().forEach(function(opt) {
      ensureOption(opt.label, opt.value);
    });

    const findByLabel = function(label) {
      return Array.from(datalistEl.options).find(function(opt) {
        return normalize(opt.value) === normalize(label);
      }) || null;
    };

    const findByValue = function(value) {
      return Array.from(datalistEl.options).find(function(opt) {
        return (opt.dataset && opt.dataset.id) && String(opt.dataset.id) === String(value);
      }) || null;
    };

    if (hiddenEl && hiddenEl.value) {
      const preset = findByValue(hiddenEl.value);
      if (preset && preset.value) {
        displayEl.value = preset.value;
      }
    } else if (hiddenEl && displayEl.value) {
      const match = findByLabel(displayEl.value);
      if (match && match.dataset && match.dataset.id) {
        hiddenEl.value = match.dataset.id;
      }
    }

    const rememberChoice = function(label, value) {
      if (!storageKey) {
        return;
      }
      const trimmed = (label || '').trim();
      if (!trimmed) {
        return;
      }

      const stored = loadStored();
      if (stored.some(function(item) { return normalize(item.label) === normalize(trimmed); })) {
        return;
      }

      const entry = { label: trimmed };
      if (value) {
        entry.value = value;
      }

      stored.unshift(entry);
      saveStored(stored);
      ensureOption(entry.label, entry.value);
    };

    const syncHidden = function() {
      const label = displayEl.value.trim();
      const matched = findByLabel(label);
      if (hiddenEl) {
        if (matched) {
          hiddenEl.value = matched.dataset && matched.dataset.id ? matched.dataset.id : '';
        } else if (allowUnknown) {
          hiddenEl.value = label;
        } else {
          hiddenEl.value = '';
        }
      }

      if (highlightUnknown) {
        if (label && !matched) {
          displayEl.classList.add('input-unmatched');
        } else {
          displayEl.classList.remove('input-unmatched');
        }
      }

      return { label, matched };
    };

    displayEl.addEventListener('change', function() {
      const result = syncHidden();
      if (result.label && (result.matched || rememberUnknown)) {
        const storedValue = result.matched && result.matched.dataset ? result.matched.dataset.id : (hiddenEl ? hiddenEl.value : '');
        rememberChoice(result.label, storedValue);
      }
    });

    displayEl.addEventListener('blur', function() {
      const result = syncHidden();
      if (result.label && (result.matched || rememberUnknown)) {
        const storedValue = result.matched && result.matched.dataset ? result.matched.dataset.id : (hiddenEl ? hiddenEl.value : '');
        rememberChoice(result.label, storedValue);
      }
    });

    displayEl.addEventListener('input', function() {
      if (!displayEl.value.trim()) {
        if (hiddenEl) {
          hiddenEl.value = '';
        }
        displayEl.classList.remove('input-unmatched');
      }
    });

    const filtersForm = document.querySelector('form.filters');
    if (filtersForm) {
      filtersForm.addEventListener('submit', function() {
        const result = syncHidden();
        if (result.label && (result.matched || rememberUnknown)) {
          const storedValue = result.matched && result.matched.dataset ? result.matched.dataset.id : (hiddenEl ? hiddenEl.value : '');
          rememberChoice(result.label, storedValue);
        }
      });
    }

    syncHidden();
    return {
      sync: syncHidden
    };
  }

  setupSmartSuggest({
    displayId: 'filter_type_display',
    hiddenId: 'filter_type_id',
    datalistId: 'filterTypeOptions',
    storageKey: 'qlgv_filter_type_history',
    allowUnknown: false,
    rememberUnknown: true,
    highlightUnknown: true
  });
    
    // Utility functions
    function showModal(modalId) {
        document.getElementById(modalId).style.display = 'block';
        document.body.classList.add('modal-open');
    }
    
    function hideModal(modalId) {
        document.getElementById(modalId).style.display = 'none';
        document.body.classList.remove('modal-open');
    }
    
    function showToast(message, type = 'success') {
        // Simple toast notification (you can enhance this)
        const toast = document.createElement('div');
        toast.className = `toast toast-${type}`;
        toast.textContent = message;
        toast.style.cssText = `
            position: fixed; top: 20px; right: 20px; z-index: 9999;
            padding: 12px 20px; border-radius: 4px; color: white;
            background: ${type === 'success' ? '#28a745' : type === 'error' ? '#dc3545' : '#ffc107'};
            box-shadow: 0 2px 8px rgba(0,0,0,0.2);
        `;
        document.body.appendChild(toast);
        setTimeout(() => toast.remove(), 3000);
    }
    
    // Event handlers for directive actions
    document.querySelectorAll('.directive-edit').forEach(btn => {
        btn.addEventListener('click', function() {
            currentDocId = this.dataset.id;
            const currentDirective = this.dataset.directive || '';
            
            document.getElementById('directiveContent').value = currentDirective;
            document.getElementById('directiveNote').value = '';
            showModal('directiveModal');
        });
    });
    
    document.querySelectorAll('.directive-approve').forEach(btn => {
        btn.addEventListener('click', function() {
            currentDocId = this.dataset.id;
            const currentDirective = this.dataset.directive || '';
            
            document.getElementById('currentDirectiveText').textContent = currentDirective;
            document.getElementById('approveNote').value = '';
            showModal('approveModal');
        });
    });
    
    // View document
    document.querySelectorAll('.view-doc').forEach(btn => {
        btn.addEventListener('click', function() {
            const docId = this.dataset.id;
            window.location.href = `/documents/${docId}`;
        });
    });
    
    // Edit document
    document.querySelectorAll('.edit-doc').forEach(btn => {
        btn.addEventListener('click', function() {
            const docId = this.dataset.id;
            window.location.href = `/documents/${docId}/edit`;
        });
    });
    
    // Delete document
    document.querySelectorAll('.delete-doc').forEach(btn => {
        btn.addEventListener('click', function() {
            currentDocId = this.dataset.id;
            const docNumber = this.dataset.number;
            
            document.getElementById('deleteDocNumber').textContent = docNumber;
            showModal('deleteModal');
        });
    });
    
    // Form submissions
    document.getElementById('directiveForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const data = {
            chi_dao: formData.get('chi_dao'),
            note: formData.get('note')
        };
        
        try {
            const response = await fetch(`/documents/${currentDocId}/directive`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (result.success) {
                showToast('Đã cập nhật chỉ đạo thành công');
                hideModal('directiveModal');
                location.reload(); // Refresh to show updated data
            } else {
                showToast(result.message || 'Có lỗi xảy ra', 'error');
            }
        } catch (error) {
            showToast('Lỗi kết nối', 'error');
        }
    });
    
    document.getElementById('approveForm').addEventListener('submit', async function(e) {
        e.preventDefault();
        
        const formData = new FormData(this);
        const data = {
            note: formData.get('note')
        };
        
        try {
            const response = await fetch(`/documents/${currentDocId}/directive/approve`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify(data)
            });
            
            const result = await response.json();
            
            if (result.success) {
                showToast('Đã phê duyệt chỉ đạo thành công');
                hideModal('approveModal');
                location.reload();
            } else {
                showToast(result.message || 'Có lỗi xảy ra', 'error');
            }
        } catch (error) {
            showToast('Lỗi kết nối', 'error');
        }
    });
    
    document.getElementById('confirmDelete').addEventListener('click', async function() {
        try {
            const response = await fetch(`/documents/${currentDocId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json',
                }
            });
            
            const result = await response.json();
            
            if (result.success) {
                showToast('Đã xóa văn bản thành công');
                hideModal('deleteModal');
                location.reload();
            } else {
                showToast(result.message || 'Có lỗi xảy ra', 'error');
            }
        } catch (error) {
            showToast('Lỗi kết nối', 'error');
        }
    });

  // Attachments handler
  document.querySelectorAll('.attachments-doc').forEach(btn => {
    btn.addEventListener('click', async function() {
      const docId = this.dataset.id;
      const number = this.dataset.number;
      currentDocId = docId;
      document.getElementById('attachmentsDocNumber').textContent = `(#${number})`;
      const listEl = document.getElementById('attachmentsList');
      listEl.classList.add('loading');
      listEl.innerHTML = 'Đang tải...';
      showModal('attachmentsModal');
      try {
        const res = await fetch(`/documents/${docId}/files`);
        const data = await res.json();
        if (!data.success) throw new Error(data.message || 'Lỗi tải');
        if (!data.data.length) {
          listEl.innerHTML = '<div class="empty-files">Chưa có tệp đính kèm.</div>';
        } else {
          listEl.innerHTML = '';
          const tpl = document.getElementById('attachmentRowTpl');
          data.data.forEach(f => {
            const node = tpl.content.cloneNode(true);
            node.querySelector('.file-name').textContent = f.original_name;
            node.querySelector('.file-info').textContent = `${(f.size/1024).toFixed(1)} KB · ${f.mime_type}`;
            const dl = node.querySelector('.file-download');
            dl.href = `/documents/files/${f.id}/download`;
            const pvBtn = node.querySelector('.file-preview');
            pvBtn.addEventListener('click', async () => {
              const previewContainer = document.getElementById('previewContainer');
              const previewContent = document.getElementById('previewContent');
              previewContent.innerHTML = 'Đang tải preview...';
              previewContainer.style.display = 'block';
              
              // Fetch preview info from backend
              try {
                const infoRes = await fetch(`/documents/files/${f.id}/preview-info`);
                const info = await infoRes.json();
                
                if (!info.success) {
                  previewContent.innerHTML = `<div class="error">${info.message}</div>`;
                  return;
                }
                
                // Render based on type
                if (info.type === 'pdf' && info.previewable) {
                  previewContent.innerHTML = `<iframe src="/documents/files/${f.id}/preview" style="width:100%;height:400px;border:1px solid #e5e7eb;border-radius:4px;" frameborder="0"></iframe>`;
                } else if (info.type === 'image') {
                  previewContent.innerHTML = `<img src="/documents/files/${f.id}/preview" style="max-width:100%;max-height:400px;border:1px solid #e5e7eb;border-radius:4px;object-fit:contain;" />`;
                } else if (info.type === 'text') {
                  previewContent.innerHTML = `<pre style="white-space:pre-wrap;max-height:400px;overflow:auto;">${info.content.replace(/[&<>]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;'}[c]))}</pre>`;
                } else if (info.type === 'word' && info.previewable) {
                  const downloadUrl = window.location.origin + '/documents/files/' + f.id + '/download';
                  const googleViewerUrl = 'https://docs.google.com/viewer?url=' + encodeURIComponent(downloadUrl) + '&embedded=true';
                  previewContent.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                      <p><i class="fas fa-file-word" style="font-size: 36px; color: #2b579a;"></i></p>
                      <p><strong>${info.filename}</strong></p>
                      <p style="color: #666;">File Word - Chọn cách xem:</p>
                      <div style="margin-top: 15px;">
                        <a href="/documents/files/${f.id}/download" class="btn btn-sm btn-primary" style="margin: 5px;">
                          <i class="fas fa-download"></i> Tải xuống
                        </a>
                        <a href="${googleViewerUrl}" target="_blank" class="btn btn-sm btn-info" style="margin: 5px;">
                          <i class="fas fa-external-link-alt"></i> Xem qua Google Docs
                        </a>
                      </div>
                    </div>`;
                } else if (info.type === 'archive') {
                  previewContent.innerHTML = `
                    <div style="text-align: center; padding: 20px;">
                      <p><i class="fas fa-file-archive" style="font-size: 36px; color: #ffa500;"></i></p>
                      <p><strong>${info.filename}</strong></p>
                      <p style="color: #666;">${info.message || 'File nén không hỗ trợ xem trước'}</p>
                      <a href="/documents/files/${f.id}/download" class="btn btn-sm btn-success" style="margin-top: 10px;">
                        <i class="fas fa-download"></i> Tải xuống
                      </a>
                    </div>`;
                } else {
                  previewContent.innerHTML = '<div class="unsupported">Loại file không hỗ trợ xem trước. <a href="/documents/files/' + f.id + '/download">Tải về</a></div>';
                }
              } catch (err) {
                previewContent.innerHTML = `<div class="error">Lỗi: ${err.message}</div>`;
              }
            });
            listEl.appendChild(node);
          });
        }
      } catch (err) {
        listEl.innerHTML = `<div class="error">${err.message}</div>`;
      } finally {
        listEl.classList.remove('loading');
      }
    });
  });

  document.addEventListener('click', function(e){
    if (e.target.classList.contains('close-preview')) {
      document.getElementById('previewContainer').style.display='none';
    }
  });
    
    // Close modal handlers
    document.querySelectorAll('[data-dismiss="modal"]').forEach(btn => {
        btn.addEventListener('click', function() {
            const modal = this.closest('.modal');
            if (modal) {
                hideModal(modal.id);
            }
        });
    });
    
    // Close modal when clicking outside
    document.querySelectorAll('.modal').forEach(modal => {
        modal.addEventListener('click', function(e) {
            if (e.target === this) {
                hideModal(this.id);
            }
        });
    });
});
</script>
